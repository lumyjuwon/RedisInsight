name: Build macos pipeline
on:
  workflow_call:
    inputs:
      target:
        description: Build target
        required: false
        default: 'all'
        type: string

jobs:
  build:
    runs-on: macos-14
    name: Build macos job
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      USE_HARD_LINKS: ${{ vars.USE_HARD_LINKS }}
      CSC_KEYCHAIN: ${{ vars.CSC_KEYCHAIN }}
      CSC_IDENTITY_AUTO_DISCOVERY: ${{ vars.CSC_IDENTITY_AUTO_DISCOVERY }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

    steps:
    - uses: actions/checkout@v4.1.0

    - name: Add certificates to the keychain
      uses: ./.github/actions/install-apple-certs
      with:
        CSC_P12_BASE64: ${{ secrets.CSC_P12_BASE64 }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        CSC_MAS_PASSWORD: ${{ secrets.CSC_MAS_PASSWORD }}
        CSC_MAS_P12_BASE64: ${{ secrets.CSC_MAS_P12_BASE64 }}
        CSC_MAC_INSTALLER_PASSWORD: ${{ secrets.CSC_MAC_INSTALLER_PASSWORD }}
        CSC_MAC_INSTALLER_P12_BASE64: ${{ secrets.CSC_MAC_INSTALLER_P12_BASE64 }}

    - name: Install all libs and dependencies
      uses: ./.github/actions/install-all-build-libs
      with:
        keytar-host-mirror: ${{ secrets.NPM_CONFIG_KEYTAR_BINARY_HOST_MIRROR }}
        sqlite3-host-mirror: ${{ secrets.NPM_CONFIG_NODE_SQLITE3_BINARY_HOST_MIRROR }}

    - name: Install plugins dependencies and build plugins
      run: yarn build:statics

    - name: Build macos dmg (prod)
      if: vars.ENV == 'production' && inputs.target == 'all'
      run: |
        unset CSC_LINK

        yarn package:prod
        yarn package:mas
        rm -rf release/mac
        mv release/mas-universal/Redis-Insight-mac-universal-mas.pkg release/Redis-Insight-mac-universal-mas.pkg

    - name: Build macos dmg (staging)
      if: (vars.ENV == 'staging' || vars.ENV == 'development') && inputs.target == 'all'
      run: |
        unset CSC_LINK

        echo "$USE_HARD_LINKS"
        echo $APP_BUNDLE_VERSION
        echo $CSC_KEYCHAIN

        yarn package:stage && yarn package:mas
        rm -rf release/mac
        mv release/mas-universal/Redis-Insight-mac-universal-mas.pkg release/Redis-Insight-mac-universal-mas.pkg

    # handle manual builds
    - name: Build macos dmg (dev)
      if: inputs.target != 'all'
      run: |
        unset CSC_LINK
        yarn package:stage --mac ${{ inputs.target }}
        rm -rf release/mac

    - name: Repack dmg to tar
      if: vars.ENV == 'staging' || vars.ENV == 'production'
      run: |
        ARCH=x64 ./.circleci/redisstack/dmg.repack.sh
        ARCH=arm64 ./.circleci/redisstack/dmg.repack.sh

    - name: Upload x64 packages
      uses: actions/upload-artifact@v4.1.0
      with:
        name: 'macos-x64-builds'
        path: |
          ./release/Redis-Insight*x64.dmg
          # ./release/Redis-Insight*x64.zip
          # ./release/Redis-Insight*x64.dmg.blockmap

    - name: Upload ARM packages
      uses: actions/upload-artifact@v4.1.0
      with:
        name: 'macos-arm-builds'
        path: |
          ./release/Redis-Insight*arm64.dmg
          # ./release/Redis-Insight*arm64.zip
          # ./release/Redis-Insight*arm64.dmg.blockmap

    - name: Upload MAS packages
      uses: actions/upload-artifact@v4.1.0
      with:
        name: 'macos-mas-builds'
        path: |
          ./release/Redis-Insight*.pkg
          # ./release/*-mac.yml

    - name: Upload redis stack packages
      uses: actions/upload-artifact@v4.1.0
      with:
        name: 'redistack-builds'
        path: |
          ./release/redisstack
